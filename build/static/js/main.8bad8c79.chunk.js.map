{"version":3,"sources":["store/theme.context.js","utils/dishTypes.js","components/ButtonSubmit/styles/ButtonSubmitStyled.js","components/ButtonSubmit/ButtonSubmit.js","components/ContactForm/styles/ContactFormStyled.js","components/MyOwnField/styles/MyOwnField.styled.js","components/MyOwnField/MyOwnField.js","components/FormFields/DefaultInputsForm/DefaultInputsForm.js","components/FormFields/PizzaAdditionalInputsForm/PizzaAdditionalInputsForm.js","components/FormFields/SoupAdditionalInputsForm/SoupAdditionalInputsForm.js","utils/maxSpicinessScale.js","components/FormFields/SandwichAdditionalInputsForm/SandwichAdditionalInputsForm.js","utils/messagesStatusses.js","utils/sendData.js","utils/myURL.js","components/ContactForm/ContactForm.js","utils/cleanObj.js","utils/clearForm.js","utils/getAdditionalInputsForm.js","components/ContactBox/styles/ContactBoxStyled.js","components/ContactBox/ContactBox.js","components/MainHeading/styles/MainHeadingStyled.js","components/MainHeading/MainHeading.js","components/ButtonChangeTheme/styles/ButtonChangeThemeStyled.js","components/ButtonChangeTheme/ButtonChangeTheme.js","utils/changeThemeColor.js","components/MessageBoxSubmit/styles/MessageBoxSubmitStyled.js","components/MessageSubmitText/styles/MessageSubmitTextStyled.js","components/MessageSubmitText/MessageSubmitText.js","components/MessageBoxSubmit/MessageBoxSubmit.js","App.js","utils/checkDarkThemeMustUsed.js","reportWebVitals.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","props","didMount","useRef","useState","JSON","parse","localStorage","getItem","isLightThemeColor","setIsLightThemeColor","useEffect","current","document","getElementById","classList","toggle","Provider","value","children","dishTypes","PIZZA","SOUP","SANDWICH","ButtonSubmitStyled","styled","button","ButtonSubmit","type","ContactFormStyled","form","MyOwnFieldStyled","div","Label","label","MyOwnField","useContext","useField","field","meta","htmlFor","id","name","as","touched","error","className","DefaultInputsForm","placeholder","required","Object","values","map","element","uuidv4","preparation_time","pattern","PizzaAdditionalInputsForm","no_of_slices","step","diameter","SoupAdditionalInputsForm","Array","index","SandwichAdditionalInputsForm","slices_of_bread","messages","success","messagesStatusses","sendData","data","setMessageStatus","setIsSubmit","a","axios","method","url","headers","then","response","console","log","status","catch","ContactForm","initialValues","onSubmit","resetForm","obj","propName","undefined","cleanObj","spiciness_scale","Number","stringify","clearForm","onReset","handleReset","handleSubmit","AdditionalInputsComponent","dishType","getAdditionalInputsForm","ContactBoxStyled","defaultProps","ContactBox","MainHeadingStyled","h1","MainHeading","ButtonChangeThemeStyled","TextDescription","span","ButtonChangeTheme","checked","onChange","newIsLightColor","setItem","changeThemeColor","MessageBoxSubmitStyled","section","p","MessageSubmitText","MessageBoxSubmit","timer1","setTimeout","clearTimeout","messageStatus","App","isSubmit","appEl","add","checkDarkThemeMustUsed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8bad8c79.chunk.js","sourcesContent":["import { useState, createContext, useEffect, useRef } from \"react\";\n\nexport const ThemeContext = createContext();\n\nexport const ThemeContextProvider = (props) => {\n  const themeLSkey = \"isLightTheme\";\n  const didMount = useRef(false);\n  const [isLightThemeColor, setIsLightThemeColor] = useState(\n    JSON.parse(localStorage.getItem(themeLSkey)) ?? true\n  );\n  useEffect(() => {\n    if (didMount.current) {\n      document.getElementById(\"App\").classList.toggle(\"dark-theme\");\n    } else {\n      didMount.current = true;\n    }\n  }, [isLightThemeColor]);\n  return (\n    <ThemeContext.Provider value={[isLightThemeColor, setIsLightThemeColor]}>\n      {props.children}\n    </ThemeContext.Provider>\n  );\n};\n","export const dishTypes = {\n  PIZZA: \"pizza\",\n  SOUP: \"soup\",\n  SANDWICH: \"sandwich\",\n};\n","import styled from \"styled-components\";\n\nexport const ButtonSubmitStyled = styled.button`\n  background-color: #5469d4;\n\n  color: #fff;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  line-height: 28px;\n  padding: 8px 16px;\n  width: 100%;\n  min-height: 44px;\n  border-radius: 4px;\n  border: 3px transparent dashed;\n  outline-color: transparent;\n  &:hover {\n    background: #fff;\n    border-style: solid;\n    border-color: #5469d4;\n    color: rgb(84, 105, 212);\n    transition: all 0.3s ease;\n  }\n  &:focus-within {\n    border-color: #e00;\n    color: rgb(84, 105, 212);\n    background-color: #fff;\n  }\n`;\n","import { ButtonSubmitStyled } from \"./styles/ButtonSubmitStyled.js\";\n\nexport const ButtonSubmit = () => {\n  return <ButtonSubmitStyled type=\"submit\">Submit</ButtonSubmitStyled>;\n};\n","import styled from \"styled-components\";\n\nexport const ContactFormStyled = styled.form`\n  padding: 48px;\n`;\n","import styled from \"styled-components\";\n\nexport const MyOwnFieldStyled = styled.div`\n  padding-bottom: 24px;\n  max-width: 352px;\n  display: flex;\n  flex-direction: column;\n  input,\n  select {\n    font-size: 16px;\n    line-height: 28px;\n    padding: 8px 16px;\n    min-height: 44px;\n    border: unset;\n    border-radius: 4px;\n    box-sizing: content-box;\n    outline-color: rgb(84 105 212 / 0.5);\n    background-color: rgb(255, 255, 255);\n    box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px,\n      rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px,\n      rgba(60, 66, 87, 0.16) 0px 0px 0px 1px, rgba(0, 0, 0, 0) 0px 0px 0px 0px,\n      rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px;\n  }\n  input[data-light-mode=\"true\"]:focus-visible,\n  select[data-light-mode=\"true\"]:focus-visible {\n    outline: 2px #e00 dashed;\n    background-color: #fff;\n  }\n  input[data-light-mode=\"false\"]:focus-visible,\n  select[data-light-mode=\"false\"]:focus-visible {\n    outline: unset;\n    background-color: #fffc97;\n  }\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\nexport const Label = styled.label`\n  font-size: 14px;\n  font-weight: 600;\n  display: block;\n  margin-bottom: 10px;\n  color: ${(props) => (props.isLightThemeColor ? \"#000\" : \"#fff\")};\n`;\n","import { useContext } from \"react\";\nimport { useField, Field } from \"formik\";\nimport { ThemeContext } from \"../../store/theme.context\";\nimport { MyOwnFieldStyled, Label } from \"./styles/MyOwnField.styled\";\n\nexport const MyOwnField = ({ label, ...props }) => {\n  const [isLightThemeColor] = useContext(ThemeContext);\n  const [field, meta] = useField(props);\n\n  return (\n    <MyOwnFieldStyled>\n      <Label\n        isLightThemeColor={isLightThemeColor}\n        htmlFor={props.id || props.name}>\n        {label}\n      </Label>\n      <Field\n        as={props.as}\n        {...field}\n        {...props}\n        data-light-mode={isLightThemeColor}\n      />\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </MyOwnFieldStyled>\n  );\n};\n","import { v4 as uuidv4 } from \"uuid\";\nimport { MyOwnField } from \"../../MyOwnField/MyOwnField\";\nimport { dishTypes } from \"../../../utils/dishTypes\";\n\nexport const DefaultInputsForm = (props) => (\n  <>\n    <MyOwnField\n      id=\"dishName\"\n      label=\"Dish name\"\n      name=\"name\"\n      type=\"text\"\n      as=\"input\"\n      value={props.name}\n      placeholder=\"Please enter dish name\"\n      required\n    />\n    <MyOwnField\n      id=\"dishType\"\n      as=\"select\"\n      name=\"type\"\n      label=\"Dish type\"\n      required>\n      <option value=\"\">Select a dish type</option>\n      {Object.values(dishTypes).map((element) => (\n        <option key={uuidv4()} value={element}>\n          {element}\n        </option>\n      ))}\n    </MyOwnField>\n    <MyOwnField\n      id=\"preparationTime\"\n      label=\"Preparation time\"\n      name=\"preparation_time\"\n      type=\"text\"\n      as=\"input\"\n      value={props.preparation_time}\n      placeholder=\"01:25:30\"\n      required\n      pattern=\"[0-9]{2}:[0-9]{2}:[0-9]{2}\"\n    />\n  </>\n);\n","import { MyOwnField } from \"../../MyOwnField/MyOwnField\";\n\nexport const PizzaAdditionalInputsForm = (props) => (\n  <>\n    <MyOwnField\n      label=\"Number of slices\"\n      name=\"no_of_slices\"\n      type=\"number\"\n      as=\"input\"\n      value={props.no_of_slices}\n      required\n      placeholder=\"Please enter number of slices\"\n    />\n    <MyOwnField\n      label=\"Diameter\"\n      name=\"diameter\"\n      type=\"number\"\n      as=\"input\"\n      step=\"0.01\"\n      value={props.diameter}\n      required\n      placeholder=\"Please enter diameter\"\n    />\n  </>\n);\n","import { v4 as uuidv4 } from \"uuid\";\nimport { MyOwnField } from \"../../MyOwnField/MyOwnField\";\nimport { maxSpicinessScale } from \"../../../utils/maxSpicinessScale\";\n\nexport const SoupAdditionalInputsForm = () => (\n  <>\n    <MyOwnField\n      name=\"spiciness_scale\"\n      as=\"select\"\n      type=\"number\"\n      label=\"Spiciness scale\"\n      required>\n      <option value=\"\">Select a spiciness scale</option>\n\n      {[...Array(maxSpicinessScale)].map((value, index) => (\n        <option key={uuidv4()} value={index + 1}>\n          {index + 1}\n        </option>\n      ))}\n    </MyOwnField>\n  </>\n);\n","export const maxSpicinessScale = 10;\n","import { MyOwnField } from \"../../MyOwnField/MyOwnField\";\nexport const SandwichAdditionalInputsForm = (props) => (\n  <>\n    <MyOwnField\n      label=\"Slices of bread\"\n      name=\"slices_of_bread\"\n      type=\"number\"\n      as=\"input\"\n      value={props.slices_of_bread}\n      required\n      placeholder=\"Please enter number of slices of bread\"\n    />\n  </>\n);\n","export const messages = {\n  error: \"Message wasn't sent\",\n  success: \"Message was sent\",\n};\n\nexport const messagesStatusses = {\n  error: \"error\",\n  success: \"success\",\n};\n","import axios from \"axios\";\nimport { myURL } from \"./myURL\";\nimport { messagesStatusses } from \"./messagesStatusses\";\n\nexport const sendData = async (data, setMessageStatus, setIsSubmit) => {\n  axios({\n    method: \"post\",\n    url: myURL,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    data: data,\n  })\n    .then((response) => {\n      setMessageStatus(messagesStatusses.success);\n      setIsSubmit(true);\n      console.log(\"Success:\", response.status);\n    })\n    .catch((error) => {\n      setMessageStatus(messagesStatusses.error);\n      setIsSubmit(true);\n      console.error(\"Error:\", error);\n    });\n};\n","export const myURL = \"https://frosty-wood-6558.getsandbox.com:443/dishes\";\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { dishTypes } from \"../../utils/dishTypes.js\";\nimport { ButtonSubmit } from \"../ButtonSubmit/ButtonSubmit.js\";\nimport { ContactFormStyled } from \"./styles/ContactFormStyled\";\nimport { DefaultInputsForm } from \"../FormFields/DefaultInputsForm/DefaultInputsForm.js\";\nimport { getAdditionalInputsForm } from \"../../utils/getAdditionalInputsForm.js\";\nimport { sendData } from \"../../utils/sendData.js\";\nimport { clearForm } from \"../../utils/clearForm\";\nimport { cleanObj } from \"../../utils/cleanObj\";\n\nlet ContactForm = (props) => {\n  return (\n    <Formik\n      initialValues={{\n        type: false,\n        name: \"\",\n        preparation_time: null,\n      }}\n      onSubmit={(values, { resetForm }) => {\n        const data = cleanObj(values);\n\n        if (values.type === dishTypes.SOUP)\n          data.spiciness_scale = Number(values.spiciness_scale);\n\n        sendData(\n          JSON.stringify(data, null, 2),\n          props.setMessageStatus,\n          props.setIsSubmit\n        );\n        clearForm(resetForm);\n      }}>\n      {(props) => (\n        <ContactFormStyled\n          onReset={props.handleReset}\n          onSubmit={props.handleSubmit}\n          isLightThemeColor={props.isLightThemeColor}>\n          <DefaultInputsForm values={props.values} />\n          {(() => {\n            const isDishTypeSelected = props.values.type\n              ? props.values.type\n              : false;\n\n            if (!isDishTypeSelected) return false;\n\n            const AdditionalInputsComponent = getAdditionalInputsForm(\n              props.values.type\n            );\n\n            return <AdditionalInputsComponent values={props.values} />;\n          })()}\n          <ButtonSubmit />\n        </ContactFormStyled>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","export const cleanObj = (obj) => {\n  for (const propName in obj) {\n    if (\n      obj[propName] === null ||\n      obj[propName] === undefined ||\n      obj[propName] === false\n    ) {\n      delete obj[propName];\n    }\n  }\n  return obj;\n};\n","export const clearForm = (resetForm) => {\n  resetForm();\n  document.getElementById(\"dishName\").value = \"\";\n  document.getElementById(\"preparationTime\").value = \"\";\n  document.getElementById(\"dishType\").value = \"\";\n};\n","import { PizzaAdditionalInputsForm } from \"../components/FormFields/PizzaAdditionalInputsForm/PizzaAdditionalInputsForm\";\nimport { SoupAdditionalInputsForm } from \"../components/FormFields/SoupAdditionalInputsForm/SoupAdditionalInputsForm\";\nimport { SandwichAdditionalInputsForm } from \"../components/FormFields/SandwichAdditionalInputsForm/SandwichAdditionalInputsForm\";\nimport { dishTypes } from \"./dishTypes\";\n\nexport const getAdditionalInputsForm = (dishType) => {\n  switch (dishType) {\n    case dishTypes.PIZZA:\n      return PizzaAdditionalInputsForm;\n    case dishTypes.SOUP:\n      return SoupAdditionalInputsForm;\n    case dishTypes.SANDWICH:\n      return SandwichAdditionalInputsForm;\n    default:\n      return false;\n  }\n};\n","import styled from \"styled-components\";\n\nexport const ContactBoxStyled = styled.div`\n  margin: 0px auto;\n  width: 100%;\n  max-width: 448px;\n  background: #fff;\n  background: ${(props) => (props.isLightThemeColor ? \"#fff\" : \"#212121\")};\n  border-radius: 4px;\n  box-shadow: rgb(60 66 87 / 12%) 0px 7px 14px 0px,\n    rgb(0 0 0 / 12%) 0px 3px 6px 0px;\n`;\nContactBoxStyled.defaultProps = {\n  isLightThemeColor: \"#fff\",\n};\n","import { ContactBoxStyled } from \"./styles/ContactBoxStyled.js\";\nimport { useContext } from \"react\";\nimport { ThemeContext } from \"../../store/theme.context\";\n\nexport const ContactBox = (props) => {\n  let [isLightThemeColor] = useContext(ThemeContext);\n\n  return (\n    <ContactBoxStyled isLightThemeColor={isLightThemeColor}>\n      {props.children}\n    </ContactBoxStyled>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const MainHeadingStyled = styled.h1`\n  text-align: center;\n  padding: 11px 0 24px;\n  color: #5469d4;\n`;\n","import { MainHeadingStyled } from \"./styles/MainHeadingStyled\";\n\nexport const MainHeading = () => {\n  return <MainHeadingStyled>Select your dish</MainHeadingStyled>;\n};\n","import styled from \"styled-components\";\n\nexport const ButtonChangeThemeStyled = styled.div`\n  margin: 0 auto;\n  padding-top: 25px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .checkbox {\n    opacity: 0;\n  }\n\n  .label {\n    width: 50px;\n    height: 26px;\n    background-color: #5469d4;\n    display: flex;\n    border-radius: 50px;\n    align-items: center;\n    justify-content: space-between;\n    padding: 5px;\n    position: relative;\n    cursor: pointer;\n  }\n\n  .ball {\n    width: 20px;\n    height: 20px;\n    background-color: white;\n    position: absolute;\n    top: 8px;\n    left: 4px;\n    border-radius: 50%;\n    transition: transform 0.2s linear;\n  }\n\n  /*  target the elemenent after the label*/\n  .checkbox:checked + .label .ball {\n    transform: translateX(33px);\n  }\n\n  .fa-moon {\n    color: pink;\n  }\n\n  .fa-sun {\n    color: yellow;\n  }\n`;\n\nexport const TextDescription = styled.span`\n  color: ${(props) => (props.isLightThemeColor ? \"#000\" : \"#fff\")};\n`;\n","import { useContext } from \"react\";\nimport { ThemeContext } from \"../../store/theme.context.js\";\nimport { changeThemeColor } from \"../../utils/changeThemeColor.js\";\nimport {\n  ButtonChangeThemeStyled,\n  TextDescription,\n} from \"./styles/ButtonChangeThemeStyled.js\";\n\nexport const ButtonChangeTheme = () => {\n  const [isLightThemeColor, setIsLightThemeColor] = useContext(ThemeContext);\n\n  return (\n    <ButtonChangeThemeStyled>\n      <TextDescription isLightThemeColor={isLightThemeColor}>\n        Change theme color\n      </TextDescription>\n      <input\n        type=\"checkbox\"\n        className=\"checkbox\"\n        checked={isLightThemeColor}\n        id=\"checkbox\"\n        onChange={() =>\n          changeThemeColor(isLightThemeColor, setIsLightThemeColor)\n        }\n      />\n      <label htmlFor=\"checkbox\" className=\"label\">\n        <i className=\"fas fa-moon\"></i>\n        <i className=\"fas fa-sun\"></i>\n        <div className=\"ball\"></div>\n      </label>\n    </ButtonChangeThemeStyled>\n  );\n};\n","export const changeThemeColor = (isLightThemeColor, setIsLightThemeColor) => {\n  const themeLSkey = \"isLightTheme\";\n  const newIsLightColor = !isLightThemeColor;\n\n  setIsLightThemeColor(newIsLightColor);\n  localStorage.setItem(themeLSkey, newIsLightColor);\n};\n","import styled from \"styled-components\";\n\nexport const MessageBoxSubmitStyled = styled.section`\n  box-shadow: rgb(60 66 87 / 12%) 0px 7px 14px 0px,\n    rgb(0 0 0 / 12%) 0px 3px 6px 0px;\n  text-align: center;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  height: auto;\n  padding: 3vw;\n  visibility: hidden;\n  font-size: 22px;\n  z-index: 1000;\n  animation: slide-up 1.25s forwards;\n  animation-delay: 2.25s;\n  -webkit-animation-delay: 2.25s;\n  color: #fff;\n  background: #fff;\n  visibility: visible;\n  &[data-message-status=\"success\"] {\n    color: rgb(0, 128, 6);\n    background: #ffffff;\n    visibility: visible;\n  }\n  &[data-message-status=\"error\"] {\n    color: #fff;\n    visibility: visible;\n    background: rgb(251, 2, 2);\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const TextDescription = styled.p`\n  margin: 0;\n  padding: 0;\n`;\n","import { TextDescription } from \"./styles/MessageSubmitTextStyled\";\nimport { messagesStatusses, messages } from \"../../utils/messagesStatusses\";\n\nexport const MessageSubmitText = (props) => (\n  <>\n    <TextDescription>{messages[props.status]}</TextDescription>\n    <TextDescription>{messagesStatusses[props.status]}</TextDescription>\n  </>\n);\n","import { useEffect } from \"react\";\nimport { MessageBoxSubmitStyled } from \"./styles/MessageBoxSubmitStyled\";\nimport { MessageSubmitText } from \"../MessageSubmitText/MessageSubmitText\";\n\nexport const MessageBoxSubmit = (props) => {\n  const milisecondsToUnmountComponent = 4000;\n\n  useEffect(() => {\n    let timer1 = setTimeout(\n      () => props.setIsSubmit(false),\n      milisecondsToUnmountComponent\n    );\n    return () => {\n      clearTimeout(timer1);\n    };\n  }, []);\n\n  return (\n    <MessageBoxSubmitStyled data-message-status={`${props.messageStatus}`}>\n      <MessageSubmitText status={props.messageStatus} />\n    </MessageBoxSubmitStyled>\n  );\n};\n","import { useContext, useEffect, useState } from \"react\";\nimport { ThemeContext } from \"./store/theme.context.js\";\nimport ContactForm from \"./components/ContactForm/ContactForm.js\";\nimport { ContactBox } from \"./components/ContactBox/ContactBox.js\";\nimport { MainHeading } from \"./components/MainHeading/MainHeading.js\";\nimport { ButtonChangeTheme } from \"./components/ButtonChangeTheme/ButtonChangeTheme.js\";\nimport { MessageBoxSubmit } from \"./components/MessageBoxSubmit/MessageBoxSubmit.js\";\nimport { checkDarkThemeMustUsed } from \"./utils/checkDarkThemeMustUsed.js\";\n\nfunction App() {\n  const [isLightThemeColor] = useContext(ThemeContext);\n  const [isSubmit, setIsSubmit] = useState(false);\n  const [messageStatus, setMessageStatus] = useState(false);\n\n  useEffect(() => {\n    checkDarkThemeMustUsed(isLightThemeColor);\n  }, []);\n\n  return (\n    <div className=\"App\" id=\"App\">\n      <ButtonChangeTheme />\n      <MainHeading />\n      <ContactBox>\n        <ContactForm\n          setIsSubmit={setIsSubmit}\n          setMessageStatus={setMessageStatus}\n        />\n      </ContactBox>\n      {isSubmit ? (\n        <MessageBoxSubmit\n          messageStatus={messageStatus}\n          setIsSubmit={setIsSubmit}\n          setMessageStatus={setMessageStatus}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","export const checkDarkThemeMustUsed = (isLightThemeColor) => {\n  const appEl = document.getElementById(\"App\");\n  if (!isLightThemeColor) appEl.classList.add(\"dark-theme\");\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ThemeContextProvider } from \"./store/theme.context.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeContextProvider>\n      <App />\n    </ThemeContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}